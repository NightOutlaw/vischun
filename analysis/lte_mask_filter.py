import numpy as np


class LTEBaselineSuppressor:
    """
    –ü—Ä–∏–≥–Ω—ñ—á—É—î —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —Ñ–æ–Ω LTE, –≤–∏—è–≤–ª—è—î –∑–∞–ª–∏—à–∫–æ–≤—É –µ–Ω–µ—Ä–≥—ñ—é –ø–æ–≤–µ—Ä—Ö –Ω—å–æ–≥–æ.
    """

    def __init__(self, smoothing=0.05, residual_thresh_db=2.0):
        """
        Parameters:
            smoothing: –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –±–∞–∑–æ–≤–æ—ó –µ–Ω–µ—Ä–≥—ñ—ó (EMA)
            residual_thresh_db: –ø–æ—Ä—ñ–≥ –∑–∞–ª–∏—à–∫–æ–≤–æ—ó –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ
        """
        self.baseline_power = None
        self.smoothing = smoothing
        self.residual_thresh_db = residual_thresh_db

    def analyze(self, iq_array: np.ndarray) -> bool:
        """
        –í–∏–∑–Ω–∞—á–∞—î, —á–∏ —î –Ω–∞ —Ñ–æ–Ω—ñ LTE —â–æ—Å—å –Ω–µ–∑–≤–∏—á–Ω–µ.

        Returns:
            bool ‚Äî True, —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–µ—Ä–µ–≤–∏—â—É—î baseline
        """
        if len(iq_array) == 0:
            return False

        current_power = 10 * np.log10(np.mean(np.abs(iq_array)**2) + 1e-12)

        if self.baseline_power is None:
            self.baseline_power = current_power
            return False

        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—è baseline
        self.baseline_power = (1 - self.smoothing) * self.baseline_power + self.smoothing * current_power

        delta = current_power - self.baseline_power

        if delta > self.residual_thresh_db:
            print(f"[üì§LTE Suppressor] –ó–∞–ª–∏—à–∫–æ–≤–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–≤–∏—â—É—î baseline: Œî{delta:.2f} dB")
            return True
        return False
