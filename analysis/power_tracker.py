import numpy as np

# üí° –§—É–Ω–∫—Ü—ñ—è –±–µ–∑ –∫–ª–∞—Å—É ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î True/False
def analyze_power(iq_array: np.ndarray, config: dict) -> bool:
    """
    –ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—É –Ω–∞ –≤—ñ–∫–Ω—ñ.

    Parameters:
        iq_array: –º–∞—Å–∏–≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏—Ö —Å–µ–º–ø–ª—ñ–≤
        config: dict –∑ –∫–ª—é—á–∞–º–∏ 'window_size' —ñ 'threshold_db'

    Returns:
        bool ‚Äî True, —è–∫—â–æ –≤–∏—è–≤–ª–µ–Ω–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–≤–∏—â—É—î –ø–æ—Ä—ñ–≥
    """
    window_size = config.get("window_size", 256)
    threshold_db = config.get("threshold_db", 2.0)

    if len(iq_array) < window_size:
        return False

    window = iq_array[:window_size]
    power_db = 10 * np.log10(np.mean(np.abs(window) ** 2) + 1e-12)

    if power_db > threshold_db:
        print(f"[üìàPowerTracker] –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: {power_db:.2f} dB > {threshold_db:.2f} ‚Üí —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è")
        return True

    return False