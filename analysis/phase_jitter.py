import numpy as np

class PhaseJitterAnalyzer:
    """
    –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ñ–∞–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ–π–Ω–æ—ó —Ñ–∞–∑–∏ —Ç–∞ —ó—ó —Ä–æ–∑–∫–∏–¥—É.
    """

    def __init__(self, jitter_thresh_deg=20.0):
        """
        Parameters:
            jitter_thresh_deg: –ø–æ—Ä—ñ–≥ –¥–∏—Å–ø–µ—Ä—Å—ñ—ó –¥–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ–π–Ω–æ—ó —Ñ–∞–∑–∏ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
        """
        self.jitter_thresh_deg = jitter_thresh_deg

    def analyze(self, iq_array: np.ndarray) -> bool:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î IQ –º–∞—Å–∏–≤, –ø–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ —Ñ–∞–∑–∞ —Å–∏–≥–Ω–∞–ª—É –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∞

        Returns:
            bool: —á–∏ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ø–æ—Ä—ñ–≥ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        """
        if len(iq_array) < 2:
            return False

        # –î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ–π–Ω–∞ —Ñ–∞–∑–∞ –º—ñ–∂ —Å–µ–º–ø–ª–∞–º–∏
        delta_phase = np.angle(iq_array[1:] / iq_array[:-1])  # –≤ [-œÄ, œÄ]
        delta_deg = np.degrees(delta_phase)

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
        jitter_std = np.std(delta_deg)

        if jitter_std > self.jitter_thresh_deg:
            print(f"[üåÄPhaseJitter] –ù–∞–¥–ª–∏—à–∫–æ–≤–∞ —Ñ–∞–∑–æ–≤–∞ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å: œÉ = {jitter_std:.1f}¬∞")
            return True
        return False